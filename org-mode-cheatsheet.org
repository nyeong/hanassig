#+title: org-mode 치트시트
#+description: evil-mode에서의 org-mode 단축키
#+author: An Nyeong

Doom Emacs + evil-mode에서의 org-mode 치트시트. 표기된 단축기는 왠만하면 evil-mode 기준이다.

왠만한 내용은 https://orgmode.org/manual/ 에 나와있으므로 그거 보는 게 낫다. 여기는 직접 써보면서 기억하고자 정리한 내용들이다.

* 단축키
** 이동

| 키               | 동작                           |
|------------------+--------------------------------|
| gh               | 부모 요소로 이동               |
| gj               | (같은 위계의) 다음 요소로 이동 |
| gk               | (같은 위계의) 이전 요소로 이동 |
| M-위/아래 방향키 | 현재 줄을 들고 위/아래로 이동  |

** 헤딩

헤딩 위에 커서를 놓고

| 키                   | 동작                     |
|----------------------+--------------------------|
| <tab> 혹은 z a       | 접기/펴기                |
| z A                  | 모두 접기/같은 위계 펴기 |
| M-왼쪽/오른쪽 방향키 | 위계 증가/감소           |

~TAB~ 과 ~S-TAB~ 은 동작이 조금 다르다.

[[https://orgmode.org/guide/Visibility-Cycling.html]] 참고

** 테이블

| 키                   | 동작                          |
|----------------------+-------------------------------|
| (                    | 이전 셀                       |
| )                    | 다음 셀                       |
| {                    | 테이블 시작                   |
| }                    | 테이블 끝                     |
| M-왼쪽/오른쪽 방향키 | 현재 컬럼을 들고 좌/우로 이동 |
| cie                  | 셀 내부 편집                  |
| ciE                  | 행 편집                       |

* 문법

[[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/]]

** 인라인 요소

인라인 포매팅 뒤에 문자가 붙으면 포매팅이 풀린다. 🤔 대체 왜...

- ~*굵게*~ : *굵게*
- ~/기울여서/~ : /기울여서/
- ~_밑줄_~ : _밑줄_
- ~=그대로=~ : =그대로=
- ~~코드~~ : ~코드~
- ~$\sqrt{b}$~ : $\sqrt{b}$

*** 링크

기본적으로 ~[[Link]]~ 혹은 ~[[Link][보여줄 텍스트]]~ 로 표기한다.
내부에 그냥 텍스트를 넣으면 현재 파일에서 찾는다. 아래와 같은 형태의 "링크"를 넣으면 해당 경로에서 찾는다.

- ~http://...~ : 웹사이트
- ~file:...~ : 파일 링크. ~/~ 로 시작하는 절대경로나 ~./~ 로 시작하는 상대경로도 가능. 다른 문서는 ~.org~ 문서를 경로로 지정해서 링크.
- ~file:~/code/main.c::255~ 255라인으로 링크

링크 위에 커서를 두고 ~SPC m l l~ 을 입력하면 링크와 description을 편집할 수 있다.

*** 주석

- ~[fn:number]~ 로 위치를 지정하고 아래처럼 문구를 넣는다.

  : [fn:number] description

** 블록 요소

*** 인용

#+BEGIN_QUOTE
이것은 인용입니다 -- 누군가
#+END_QUOTE

*** 가운데 정렬

#+BEGIN_CENTER
This is Center
#+END_CENTER

*** 코드블록

예시 블록 안에서는 마크업이 먹히지 않는다.

#+BEGIN_EXAMPLE
예시 블록
#+END_EXAMPLE

줄의 가장 앞에 있는 ~*~, ~#+~ 같은 건 동작이 조금 달라서 앞에 ~,~ 를 붙여줘야 마크업이 안 된다고 한다.

: 간단한 예시

#+NAME: random
#+BEGIN_src elixir -n -r :cache yes
# 소스코드
IO.puts("hello world!") (ref:hello)
#+END_SRC

코드 블록 안에서 ~RET~ 을 누르면 실행하고 평가해서 본문에 삽입도 해준다. [[(hello)]]

#+RESULTS[0b7cdb3cdef97d7acc7df9d4307519f3fc578d9a]: random
: [A[Jiex(23)> import_file("/tmp/babel-yFs0WU/elixir-E8W5Vs")
: hello world!
: :ok
: [A[Jiex(24)>

이때 그냥 블록만 있으면 코드 블록 바로 밑에 결과를 삽입해주는데, ~#+NAME~ 을 같이 선언해주면 결과 블록에도 같은 이름이 붙고, 블록이 어디에 있든 그 블록을 업데이트해준다.

#+BEGIN_EXAMPLE
,#+NAME: <이름>
,#+BEGIN_src <언어> <스위치> <인자>
IO.puts("hello world!")
,#+END_SRC
#+END_EXAMPLE

- 이름 :: 생략해도 되는데, 지정하면 여러모르 쓸 수 있다. 다른 코드블록에서 참조한다거나.
- 스위치 :: 코드 실행, 내보내기, 포매팅 등을 지정할 수 있다. 생략 가능.
  - ~-n <number>~, ~+n <number>~ : 줄 수를 지정함
  - ~-r~ : 코드 안에 ~(ref:<name>)~ 문법으로 레퍼런스를 삽입할 수 있게 해준다. 레퍼런스는 다른 곳에서 ~\[\[(name)]]~으로 참조할 수 있다.
  - ~-l <string>~ : ~(ref:<name>)~ 구문이 언어 문법과 충돌하면 직접 구문을 지정해 줄 수 있다. ~"/* ref:%s */"~ 이런 식으로
- 인자 :: 코드 실행, 내보내기, 포매팅 등을 지정할 수 있다. 생략 가능.
  - ~:results silent~ :
  - ~:exports code~ :
  - ~:var var=val~ :

자세한건 https://orgmode.org/manual/Using-Header-Arguments.html 참고

*** 리스트

**** 순서 있는 리스트

1. 하나
2. 둘

**** 순서 없는 리스트

- 하나
- 둘

**** 설명 리스트

- Keyword A :: Explain
- Keyword B :: Explain

*** 테이블

org-mode에서 제일 강력한 기능이지 않을까? 재정렬은 물론이고 계산도 해준다.

#+BEGIN_SRC org
|Name|Phone|Age|
|-<TAB>

| Name | Phone | Age |
|------+-------+-----|
|      |       |     |
#+END_SRC

위처럼 헤더를 작성하고, ~|-~ 까지 작성 후 탭을 누르면 아래처럼 테이블을 완성해준다.
