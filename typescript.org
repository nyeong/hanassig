#+title: TypeScript
#+description: 돈벌이 언어

* 타입 제약하기

** extends

부분집합으로 제약함

#+begin_src typescript
type E<T> = T;
// T는 어떤 타입이든 될 수 있음

const E1: E<[3]>;
// 유효함

type E<T extends number> = T;
// T는 number의 부분집합이여야함

const E2: E<[3]>;
// 유효하지 않음
#+end_src

타입 둘이 같은지 간단히 확인하려면
$$A \subseteq B \text{ and } B \subseteq A \implies A = B$$ 임을 이용하면 된다.

#+begin_src typescript
type Equal<A, B> = A extends B ? (B extends A ? true : false) : false

// 주의! 아래의 결과는??
type E_ = Equal<1, 1 | 0>;
#+end_src

** infer

#+begin_src typescript
type Head<T extends unknown[]> = T extends [infer A, ...unknown[]]
        ? A
        : never;

type H_ = Head<1, 2, 3> // 1
#+end_src

* 유틸리티 타입

https://www.typescriptlang.org/docs/handbook/utility-types.html

** 참고

- [[https://www.youtube.com/watch?v=sH6QvzcGdoI][[조현우님의 라이브 코딩] 타입 잘 다루기 - 유틸리티 타입 만들기 (풀버전)]]
* 참고

- [[https://www.typescriptlang.org/docs/handbook/intro.html][TypeScript Handbook]]
- [[https://www.totaltypescript.com/tutorials][TotalTypeScript]]
- [[https://0e.medium.com/%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%89%E1%85%A5-rop%E1%84%80%E1%85%A1-%E1%84%86%E1%85%AF%E1%86%AB%E1%84%83%E1%85%A6-%E1%84%8A%E1%85%B5%E1%86%B8%E1%84%83%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%A1-railway-oriented-programming-4e8070c04bda][그래서, ROP가 뭔데? (Railway oriented programming)]]
- [[https://jbl428.github.io/functional-programming/][Typescript 와 fp-ts 라이브러리를 활용한 함수형 프로그래밍]]
